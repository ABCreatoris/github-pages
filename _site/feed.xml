<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-07-07T17:32:55+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Hello, ABCreatoris</title><subtitle>Startup for ABCreatoris Github page</subtitle><author><name>ChenXY</name></author><entry><title type="html">Hello, World!</title><link href="http://localhost:4000/%E6%95%99%E7%A8%8B/2025/07/07/Hello-World.html" rel="alternate" type="text/html" title="Hello, World!" /><published>2025-07-07T00:00:00+08:00</published><updated>2025-07-07T00:00:00+08:00</updated><id>http://localhost:4000/%E6%95%99%E7%A8%8B/2025/07/07/Hello-World</id><content type="html" xml:base="http://localhost:4000/%E6%95%99%E7%A8%8B/2025/07/07/Hello-World.html"><![CDATA[<p>本文作为博客站点第一篇文章，主要讲述为何写博客、何时写博客和如何写博客。其中在为何写博客中，阐述了不同阶段对于博客的需求；在何时写博客中，分析了时效性对于博文的影响以及什么时间点对于博主而言最为重要；在怎样写博客中，列举了创建博客的技术选型、什么类型的博文适合发布在此站点、以及如何保证长期主义。</p>

<h2 id="为何写博客">为何写博客</h2>

<p>​	如今的这个博客的风格已经写好很久了，但是一直以来并没有启用。就其原因，是做一件事情太注重其形式，而忘记写笔记本身。</p>

<p>​	本科阶段我就密集地接触博文，当时主要是学习其中的教程，同时也欣赏作者们分享自己的技术路线的探索精神。仿佛是在原始部落中有人在前方为大家探路，然后回来分享自己的经验。接收了别人递过来的火把，我也想做递火把的人，这是我写博客最开始的初衷。</p>

<p>​	同时，写博文也是一个梳理自己思路的一个过程。通过这个过程，以及教授他人、公开演讲、同行沟通、阅读书籍、请教专家，一个人的学识和认知才可以不断地提升。这必然是一个互惠互利的过程，也符合软价值交换的逻辑。因此在开启此博客，当前的目的主要是进行记录，梳理自己搞清楚的思路，帮助自己同时也照亮他人；同时，可以通过发布到源码网站的形式，来随时拉取构建我的博客。方便随时开启思路整理。</p>

<h2 id="何时写博客">何时写博客</h2>

<p>​	每当一个灵感的出现，都需要迅速地捕捉它，不然只消片刻它就可能从脑海中消失不见。人，都会慢慢忘掉一些事情，一些经验、巧思和苦痛，都像是酒；只有放在瓶子里才会越来越香，但如果不加以珍藏，就会挥散到空气中，或者变质成为醋。</p>

<p>​	一些聪明的人，一些聪明的做法，在开始就要迅速的总结。并不一定需要通过博客的形式，因为时效性是最重要的。想好了总结下来就尽快留下原始材料；然而最好在当天晚上，或者比较近的时间，可以快速去进行总结。这样子才可以产生有深度的内容，从原始的语料库中总结，汇集成新的文章。最后，删除博文中没有用、时效性不符合的内容。</p>

<p>​	所以，博客的撰写分为三个时刻。第一个就是开始时效性收集，从脑中的想法汇总到文字构成的初始语料；第二个是语料到博客正文的总结，将所思所想观看是否可以汇总到之前的文章或者想法，从而增强、修改或舍弃；第三个则是反复看原先的博客，以现在的视角看之前的问题，不断地去加深对问题的认知，最终汇总成一片完整的文章。</p>

<p>​	所以不可第一个时刻要选择在产生想法的当下，立即使用东西记录，无论什么来记录，如手机、电脑、iPad、纸张甚至胳膊等等。第二个时刻通常需要选择在事情结束后的一小段时间，放松下来可以做事情的时候。这个时刻必然存在，就像是去吃饭、去上洗手间，这个时刻也是必须的时刻，可能只是花费小的时间，进行一天的总结，可以不必十分完善，但是必须当天选时间来做。现在笔者我通常选择中午或者晚上，可能之后也会随着作息更改。</p>

<h2 id="如何写博客">如何写博客</h2>

<p>​	首先来说如何选取博客。作为博文来说，思想首先需要载体。过往的竹帛羊皮都因为一些原因而从记述的载体中退散，如果想要减少阅读成本，在记录的时候就应该思考载体。对于本博客，是通过文件夹加上markdown文件存储，个人认为比起从数据库不断导出来的方便许多。如果后期真的数量增加，移植起来也方便。</p>

<p>​	对于微博、开源中国、Notion以及其他的笔记软件，不得不说它们各自都有优点，但是实在没有激起写作和分享的欲望。可能不能够筛选出其中高质量的文章吧。所以感觉还是偏向于自己记录，和带有目的性的搜寻。对于自己记录，Notion却着实带来一些方便，目前采用<a href="https://www.tangly1024.com/">NotionNext</a>等博客框架来建站。但是免不了高不成低不就的情况，其他的情况可能不如博客园。做一个博客平台，个人来说，收益很低，但是有着前景。不过是后话。此站点目前不好的地方是，没有博文管理平台，单反麻烦，便是用户精神性需求。总是有需要的。</p>

<p>​	但是，目前对于一个上进的人来说，他的主要问题是饿。但是了解饿的人的需求，拥有饿的人的认知，最多赚到饿的人的钱。而赚饿的人的钱的人，又是富的人。饿的人竞争过富的人，不仅要突破资源瓶颈，同时要突破认知瓶颈。难如登天，不如赚富的人的钱，满足精神性的需求；而不是争取饿的人的稀缺资源，让自己陷落到底层搏杀的境地。不过这些关于技术选型是后话了。对于目前的我来说，能做，如果我是富的人，已经开始做了。目前而言，只可以记录，而更多的时间，得用来去做来钱的事情。这一点倒是符合了纳瓦尔的经历，不过关于这些倒是这扯远了。</p>

<p>​	目前则仅仅是用markdown+typora来记录，发布到GitHub然后变成网站，也暂时无心做评论系统，后期公布邮箱等可供联系。总之， Hello, World ! :sailboat:</p>

<p><img src="/assets/images/2025-07-07-In-World.jpg" alt="图片标注" /></p>]]></content><author><name>ChenXY</name></author><category term="教程" /><category term="技术" /><category term="文档" /><summary type="html"><![CDATA[本文作为博客站点第一篇文章，主要讲述为何写博客、何时写博客和如何写博客。其中在为何写博客中，阐述了不同阶段对于博客的需求；在何时写博客中，分析了时效性对于博文的影响以及什么时间点对于博主而言最为重要；在怎样写博客中，列举了创建博客的技术选型、什么类型的博文适合发布在此站点、以及如何保证长期主义。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/2025-07-07-Hello-World.jpg" /><media:content medium="image" url="http://localhost:4000/assets/images/2025-07-07-Hello-World.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">代码示例与最佳实践</title><link href="http://localhost:4000/%E6%8A%80%E6%9C%AF/2025/04/18/CodeExample.html" rel="alternate" type="text/html" title="代码示例与最佳实践" /><published>2025-04-18T00:00:00+08:00</published><updated>2025-04-18T00:00:00+08:00</updated><id>http://localhost:4000/%E6%8A%80%E6%9C%AF/2025/04/18/CodeExample</id><content type="html" xml:base="http://localhost:4000/%E6%8A%80%E6%9C%AF/2025/04/18/CodeExample.html"><![CDATA[<p>在这篇文章中，我们将展示各种代码示例，包括不同编程语言的语法高亮、代码块和行内代码。</p>

<h2 id="javascript-示例">JavaScript 示例</h2>

<p>以下是一个简单的 JavaScript 函数示例：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">calculateTotal</span><span class="p">(</span><span class="nx">items</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">items</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">total</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">price</span> <span class="o">=</span> <span class="nx">item</span><span class="p">.</span><span class="nx">price</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="nx">item</span><span class="p">.</span><span class="nx">discount</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">total</span> <span class="o">+</span> <span class="nx">price</span><span class="p">;</span>
  <span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// 使用示例</span>
<span class="kd">const</span> <span class="nx">items</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span> <span class="na">price</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="na">discount</span><span class="p">:</span> <span class="mf">0.1</span> <span class="p">},</span>
  <span class="p">{</span> <span class="na">price</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="na">discount</span><span class="p">:</span> <span class="mf">0.2</span> <span class="p">}</span>
<span class="p">];</span>

<span class="kd">const</span> <span class="nx">total</span> <span class="o">=</span> <span class="nx">calculateTotal</span><span class="p">(</span><span class="nx">items</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Total: $</span><span class="p">${</span><span class="nx">total</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="python-示例">Python 示例</h2>

<p>这是一个 Python 的类定义示例：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">User</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">email</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">email</span> <span class="o">=</span> <span class="n">email</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">posts</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="nf">create_post</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">content</span><span class="p">):</span>
        <span class="n">post</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">'title'</span><span class="p">:</span> <span class="n">title</span><span class="p">,</span>
            <span class="s">'content'</span><span class="p">:</span> <span class="n">content</span><span class="p">,</span>
            <span class="s">'created_at'</span><span class="p">:</span> <span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">()</span>
        <span class="p">}</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">posts</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">post</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">post</span>

    <span class="k">def</span> <span class="nf">get_posts</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">sorted</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">posts</span><span class="p">,</span> 
                     <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="s">'created_at'</span><span class="p">],</span> 
                     <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="html-和-css-示例">HTML 和 CSS 示例</h2>

<p>下面是一个响应式导航栏的示例：</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;nav</span> <span class="na">class=</span><span class="s">"navbar"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"logo"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"logo.png"</span> <span class="na">alt=</span><span class="s">"Logo"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"nav-links"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">"/"</span><span class="nt">&gt;</span>首页<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
    <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">"/about"</span><span class="nt">&gt;</span>关于<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
    <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">"/contact"</span><span class="nt">&gt;</span>联系<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
  <span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/nav&gt;</span>
</code></pre></div></div>

<p>对应的 CSS 样式：</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.navbar</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
  <span class="nl">justify-content</span><span class="p">:</span> <span class="n">space-between</span><span class="p">;</span>
  <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">1rem</span><span class="p">;</span>
  <span class="nl">background</span><span class="p">:</span> <span class="m">#fff</span><span class="p">;</span>
  <span class="nl">box-shadow</span><span class="p">:</span> <span class="m">0</span> <span class="m">2px</span> <span class="m">4px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0.1</span><span class="p">);</span>
<span class="p">}</span>

<span class="nc">.nav-links</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
  <span class="py">gap</span><span class="p">:</span> <span class="m">2rem</span><span class="p">;</span>
  <span class="nl">list-style</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">@media</span> <span class="p">(</span><span class="n">max-width</span><span class="p">:</span> <span class="m">768px</span><span class="p">)</span> <span class="p">{</span>
  <span class="nc">.nav-links</span> <span class="p">{</span>
    <span class="nl">display</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="shell-命令示例">Shell 命令示例</h2>

<p>以下是一些常用的 Git 命令：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 初始化仓库</span>
git init

<span class="c"># 添加远程仓库</span>
git remote add origin https://github.com/username/repo.git

<span class="c"># 创建并切换到新分支</span>
git checkout <span class="nt">-b</span> feature/new-feature

<span class="c"># 提交更改</span>
git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s2">"Add new feature"</span>

<span class="c"># 推送到远程仓库</span>
git push origin feature/new-feature
</code></pre></div></div>

<h2 id="行内代码示例">行内代码示例</h2>

<p>在 Markdown 中，我们可以使用 <code class="language-plaintext highlighter-rouge">行内代码</code> 来突出显示特定的代码片段。例如，<code class="language-plaintext highlighter-rouge">console.log()</code> 是一个常用的 JavaScript 函数。</p>

<h2 id="代码块中的注释">代码块中的注释</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 这是一个单行注释</span>

<span class="cm">/* 
 * 这是一个多行注释
 * 可以包含多行内容
 */</span>

<span class="cm">/**
 * 这是一个文档注释
 * @param {string} name - 用户名
 * @returns {string} 问候语
 */</span>
<span class="kd">function</span> <span class="nx">greet</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="s2">`Hello, </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">!`</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="总结">总结</h2>

<p>通过以上示例，我们可以看到不同编程语言的语法特点和最佳实践。在实际开发中，我们应该：</p>

<ol>
  <li>保持代码整洁和可读性</li>
  <li>添加适当的注释</li>
  <li>遵循语言特定的编码规范</li>
  <li>使用版本控制管理代码</li>
</ol>

<p>希望这些示例对您有所帮助！</p>]]></content><author><name>ChenXY</name></author><category term="技术" /><category term="代码" /><category term="示例" /><category term="技术" /><summary type="html"><![CDATA[在这篇文章中，我们将展示各种代码示例，包括不同编程语言的语法高亮、代码块和行内代码。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://placehold.co/800x400/8b5cf6/ffffff?text=Code+Example" /><media:content medium="image" url="https://placehold.co/800x400/8b5cf6/ffffff?text=Code+Example" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>